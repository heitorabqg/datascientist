{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/heitorabqg/datascientist/blob/master/perceptron_alg_prof\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gXems7TEBx-S"
      },
      "source": [
        "Para abrir o notebook no Google Colab, altere o domínio `github.com` para `githubtocolab.com`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mOS79VpjiURF"
      },
      "source": [
        "<div class=\"alert alert-block alert-danger\">\n",
        "Para praticar programação, é importante que você erre, leia as mensagens de erro e tente corrigí-los.\n",
        "    \n",
        "Dessa forma, no Google Colab, é importante que você DESATIVE OS RECURSOS DE AUTOCOMPLETAR:\n",
        "\n",
        "- Menu Ferramentas -> Configurações\n",
        "- Na janela que é aberta:\n",
        "  - Seção Editor -> Desativar \"Mostrar sugestões de preenchimento de código com base no contexto\"\n",
        "  - Seção Assistência de IA -> Desabilitar itens\n",
        "\n",
        "Na versão em inglês:\n",
        "\n",
        "- Menu Tools -> Settings\n",
        "- Na janela que é aberta:\n",
        "  - Seção Editor -> Desativar \"Show context-powered code completions\"\n",
        "  - Seção AI Assistance -> Desabilitar itens\n",
        "</div>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YONAgLYZB24h"
      },
      "source": [
        "# PSI5892 - Aula de Exercícios"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zPRGwQ33DzfZ"
      },
      "source": [
        "# Perceptron de Rosenblatt e Regressão Logística"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VoV0zwjviURG"
      },
      "source": [
        "# Exercício 1"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kZsXgAv7CYKi"
      },
      "source": [
        "Neste exercício vamos utilizar o neurônio de Rosenblatt para implementar a função lógica AND.\n",
        "\n",
        "Iniciamos importando as bibliotecas necessárias para implementar o neurônio de Rosenblatt."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "bbXUGttSUecW"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j-YtmnIlCmV6"
      },
      "source": [
        "Vamos gerar os dados de treinamento do problema começando pelo AND."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7oXZxOupDzfb"
      },
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "Complete o código a seguir:\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "HwDABZUlUecY"
      },
      "outputs": [],
      "source": [
        "Nt = 100  # número de pontos de treinamento\n",
        "\n",
        "#############\n",
        "# x deve ser uma matriz com Nt linhas e 2 colunas com valores 0 ou 1 aleatórios,\n",
        "# que pode ser gerada usando as funções np.round e np.random.uniform.\n",
        "# d deve ser um vetor coluna com Nt linhas contendo o resultado da função lógica\n",
        "# AND aplicada ao vetor x. Para isso use a função np.logical_and.\n",
        "# Note que a função np.logical_and devolve um vetor com elementos do tipo boolean.\n",
        "# Para transformar os elementos para o tipo inteiro, basta multiplicá-lo por 1\n",
        "# ou usar o método .astype(int)\n",
        "\n",
        "#x =\n",
        "x = np.round(np.random.uniform(0, 1, (Nt, 2)))\n",
        "\n",
        "#d = 1*()\n",
        "d = 1*(np.logical_and(x[:,0], x[:,1]))\n",
        "d = d.reshape(-1, 1)\n",
        "#############"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DdQnGc9XJJq7"
      },
      "source": [
        "A função a seguir implementa o neurônio de Rosenblatt no modo mini-batch. Modifique o programa do algoritmo LMS no modo mini- inserindo a função de ativação.\n",
        "Para obter 0 ou 1 na saída, deve-se usar a função degrau em vez da função sinal. Para isso, use a função `np.heaviside`.\n",
        "Uma outra modificação que deve ser considerada é a inicialização dos pesos e bias, que agora devem ser inicializados com valores aleatórios uniformemente distribuídos no intervalo [-dw, dw]."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wbN1OJVbDzfc"
      },
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "Complete o código a seguir:\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "SsWVWo60aXxs"
      },
      "outputs": [],
      "source": [
        "def Rosenblatt_minibatch(x, d, eta, Nt, Ne, Nb, dw):\n",
        "    \"\"\"\n",
        "    W = Rosenblatt_minibatch(x, d, eta, Nt, Ne, Nb)\n",
        "    x: sinal de entrada\n",
        "    d: sinal desejado\n",
        "    eta: passo de adaptação\n",
        "    Nt: número de dados de treinamento\n",
        "    Ne: número de épocas\n",
        "    Nb: tamanho do mini-batch\n",
        "    dw: inicialização dos pesos e bias com distribuição uniforme no invervalo [-dw, dw]\n",
        "    \"\"\"\n",
        "    \"\"\"\n",
        "    Novamente, vamos juntar o sinal de entrada e o sinal desejado em um único vetor,\n",
        "    uma vez que a cada época vamos embaralhar os dados.\n",
        "    Ao fazer isso, já inserimos uma coluna de 1's para levar em conta o bias.\n",
        "    \"\"\"\n",
        "    #############\n",
        "\n",
        "    M = x.shape[1]\n",
        "    print(\"\\nValor de M\", M)\n",
        "    Nmb = int(np.floor(Nt / Nb))\n",
        "    print(\"Valor de Nmb\", Nmb)\n",
        "\n",
        "    # inicialização dos pesos e bias com distribuição uniforme no invervalo [-dw, dw]\n",
        "    W = np.random.uniform(-dw, dw, (Ne*Nmb + 1, M+1))\n",
        "    #print(\"\\nDimensao W\", W.shape)\n",
        "\n",
        "    # juntar o sinal de entrada e o sinal desejado em um único vetor e incluir 1s para o bias\n",
        "    Xd = np.hstack((np.ones((Nt, 1)), x, d))\n",
        "    #print(\"\\Dimensao Xd\", Xd.shape)\n",
        "\n",
        "    # epocas\\n\",\n",
        "    for k in range(Ne):\n",
        "            # embaralha dados\n",
        "            np.random.shuffle(Xd)\n",
        "\n",
        "            # x e d organizados em X(l) e d(l)\n",
        "            X_l = Xd[:, :-1]\n",
        "            D_l = Xd[:, -1].reshape(-1, 1)\n",
        "\n",
        "            # mini-batches\\n\",\n",
        "            for l in range(Nmb):\n",
        "\n",
        "              # percorre os dados de Nb em Nb, Nmb vezes\n",
        "              inicio = l * Nb\n",
        "              fim = inicio + Nb\n",
        "\n",
        "              # coloca Nbx(Mb+1) elementos em X e Nbx1 em d\n",
        "              xmb = X_l[inicio:fim, :]\n",
        "              dmb = D_l[inicio:fim, :]\n",
        "\n",
        "\n",
        "              m = k * Nmb + l\n",
        "\n",
        "              # todas as entradas(X_l) do mimi-batch multiplicadas pelos coeficientes do mini-batch\n",
        "              # v = [Nb x (M+1)] x [M+1 x 1] = [Nb x 1]\n",
        "              v = xmb @ W[m, :].reshape(-1,1)\n",
        "\n",
        "              y = np.heaviside(v,1)\n",
        "\n",
        "              # erro no mini-batch\n",
        "              e = dmb - y\n",
        "\n",
        "              # gradiente com taxa ajustada\n",
        "              grad = (eta/Nb) * (e.T @ xmb)\n",
        "\n",
        "              #W[[m + 1], :] =\n",
        "              W[m + 1, :] = W[m, :] + grad\n",
        "\n",
        "    return W\n",
        "    # return W\n",
        "    #############\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "OQfbxggUUeca",
        "outputId": "1aedefa5-30e8-44c7-d349-5b959187a2e6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Valor de M 2\n",
            "Valor de Nmb 5\n",
            "[-0.17648544  0.13940552  0.15719143]\n"
          ]
        }
      ],
      "source": [
        "eta = 0.5  # passo de adaptação do algoritmo de Rosenblatt\n",
        "Nb = 20\n",
        "Ne = 100\n",
        "dw = 2\n",
        "\n",
        "#############  Complete o código a seguir\n",
        "W = Rosenblatt_minibatch(x, d, eta, Nt, Ne, Nb, dw)\n",
        "\n",
        "# Wfinal deve ser os valores de pesos e bias da última iteração\n",
        "Wfinal = W[-1]\n",
        "print(Wfinal)\n",
        "#############"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2-LsVdceDzfc"
      },
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "Complete o código a seguir:\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "ng4gDTrILTVT",
        "outputId": "ff29c064-6b93-4688-8332-4ccda33089e9",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 490
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'pesos e bias ao longo das iterações')"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "# Gere um gráfico para mostrar os pesos e bias ao longo das iterações\n",
        "\n",
        "#plt.plot(W, \"k\", label=\"W\")\n",
        "plt.plot(W[:,0], linestyle='solid', label='bias', color='c')\n",
        "plt.plot(W[:,1], linestyle='solid', label='w1', color='k')\n",
        "plt.plot(W[:,2], linestyle='solid', label='w2', color='b')\n",
        "\n",
        "plt.xlabel(\"iterações\")\n",
        "plt.ylabel(\"pesos\")\n",
        "plt.legend()\n",
        "plt.title(\n",
        "    \"pesos e bias ao longo das iterações\"\n",
        ")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uASv_CQIDzfd"
      },
      "source": [
        "<div class=\"alert alert-block alert-success\">\n",
        "Complete o código a seguir:\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RNKpIjMzUecb"
      },
      "outputs": [],
      "source": [
        "# Gere os dados de teste, calcule a taxa de erro e gere a reta de separação das\n",
        "# regiões, mostrando em um mesmo gráfico a reta e os dados de teste classificados.\n",
        "# Comente o resultado, explicando se é possível utilizar o neurônio de Rosenblatt\n",
        "# para implementar esta função lógica.\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dtl5t1ebiURL"
      },
      "source": [
        "# Exercício 2\n",
        "\n",
        "Repita o exercício anterior considerando as portas lógicas OR e o XOR.\n",
        "\n",
        "## Resolução"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "U_hZpzlviURL"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A1lBadh_iURL"
      },
      "source": [
        "# Exercício 3\n",
        "\n",
        "Repita o exercício para as portas lógicas AND, OR e XOR considerando a otimização do modelo utilizando a regressão logística com as seguintes funções custo:\n",
        "- Erro quadrático médio\n",
        "- Entropia cruzada\n",
        "\n",
        "## Resolução"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dOAnxtkxiURM"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.12.11"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}